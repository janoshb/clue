#!/usr/bin/env python3
import re
import argparse
import sys

'''
Copyright 2018 Jannis Bloemendal

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

class Scope:
    type = '{}' # class, function (func), flow, encapsulation ({})
    jack = ''
    level = ''
    parent = None
    childs = []

    def __init__(self, type='{}', level=0, jack=''):
        self.type = type
        self.level = level
        self.jack = jack
        self.childs = []

    def setParent(self, parent):
        self.parent = parent
        if parent:
            parent.addChild(self)

    def getParent(self):
        return self.parent

    def addChild(self, child):
        if not child in self.childs:
            self.childs.append(child)

    def getChilds(self):
        return self.childs

    def isLeaf(self):
        return len(self.childs) == 0

    def __str__(self):
        return "%s %s" % (self.type, self.jack)


class Decision(Scope):
    sor = '||'
    sand = '&&'
    jack = ''
    text = '' 
    index = 0
    level = 0

    def __init__(self, jack, index, level, text):
        self.jack = jack
        self.type = 'decision'
        self.index = index
        self.level = level
        self.text = text
        self.childs = []

    def conditions(self):
        return 1+self.ors() + self.ands()

    def ors(self):
        return self.text.count(self.sor)

    def ands(self):
        return self.text.count(self.sand)

    def scale(self, height):
        s = 0 
        for c in range(0, self.ands()+1):
            cs = (self.index) / (c+1)
            #print("and condition %s = i:%s, c:%s, h:%s, l:%s, scale: %s" % (self.text, self.index, c, height, self.level, cs))
            s += cs
        for c in range(0, self.ors()):
            cs = 1
            #print("or condition %s = i:%s, c:%s, h:%s, l:%s, scale: %s" % (self.text, self.index, c, height, self.level, cs))
            s += cs
        return s

    def getLevel(self):
        return self.level

    def __str__(self):
        return "%s (%s)" % (self.jack, re.sub(r"[\s\n\t]+", ' ', self.text))

'''
C style scope parser
if (o>0 && u>0 && i>0) {
    for (int i=1; i<o; i++) {
        while (u>o) {
            o++;
        }
    }
}
'''
class CCodeParser:

    text = ''
    spaces = []
    index = 0
    height = 0

    def __init__(self, text):
        self.text = text
        self.spaces = []

    def parse(self):
        self.spaces = self.scopes()
        return self.spaces

    def ramify(self, relativeIndex, level, text):
        mif = re.search(r"\s*if\s*\((.*)\)\s*$", text, re.DOTALL)
        mfor = re.search(r'\s*for\s*\((.*?)\)\s*$', text, re.DOTALL)
        mwhile = re.search(r'\s*while\s*\((.*)\)\s*$', text, re.DOTALL)
        mfunction = re.search(r'\s*([a-zA-Z0-9_]+\(.*\))\s*$', text, re.DOTALL)

        if mif:
            d = Decision('if', relativeIndex, level, mif.group(1))
            return d
        elif mfor:
            d = Decision('for', relativeIndex, level, mfor.group(1))
            return d
        elif mwhile:
            d = Decision('while', relativeIndex, level, mwhile.group(1))
            return d

        return Scope()

    def squigglyL(self, relativeIndex, level):
        pattern = re.compile('^([^{}]*){')
        match = pattern.match(self.text)
        if match:
            scope = self.ramify(relativeIndex, level, match.group(1))
            self.text = self.text[len(match.group(0)):]
            return scope
        return None

    def squigglyR(self):
        pattern = re.compile('^([^}]*)}')
        match = pattern.match(self.text)
        if match:
            self.text = self.text[len(match.group(0)):]
            return True
        return False

    def scopes(self, parent=None, level=1):
        relativeIndex = 1
        scOpes = []
        s = self.scope(parent, relativeIndex, level)
        while s:
            scOpes.append(s)
            relativeIndex = relativeIndex + 1
            s = self.scope(parent, relativeIndex, level)
        return scOpes

    def scope(self, parent=None, relativIndex=1, level=1):
        scOpe = self.squigglyL(relativIndex, level)
        if not scOpe:
            return None

        scOpe.setParent(parent)
        if type(scOpe) is Decision:
            level += 1 + scOpe.conditions()-1
            if (level > self.height):
                self.height = level

        self.scopes(scOpe, level)

        self.squigglyR()
        return scOpe

    def getScopes(self):
        return self.spaces


    def acyc(self):
        def dux(scope):
            acm=0
            if scope:
                if scope.type == 'decision':
                    acm += scope.scale(self.height)
                for child in scope.getChilds():
                    acm += dux(child)
            return acm

        acm=0
        for pace in self.spaces:
            acm += dux(pace)
        return acm


    def cabe(self):
        def dux(scope):
            m=0
            if scope:
                if scope.type == 'decision':
                    m += scope.conditions()
                for child in scope.getChilds():
                    m += dux(child)
            return m

        m=0
        for pace in self.spaces:
              m += dux(pace)
        return m + 1

    def subPathsEnclosed(self, scope=None):
        if not scope:
            q = 0
            for pace in self.spaces:
                  v = self.subPathsEnclosed(pace)
                  q = q+v
            return q
        else:
            q = 0
            # print('scope %s, or %s, and %s, leaf: %s' % (scope.text, scope.ors(), scope.ands(), scope.isLeaf()))
            if scope.type == 'decision':
                if scope.isLeaf():
                    q += (scope.conditions()-1)*2+1
                else:
                    q += scope.conditions() * 2
            for child in scope.getChilds():
                q += self.subPathsEnclosed(child)

            return q
        return 0

    def subPaths(self, scope=None):
        if not scope:
            q = 1
            for pace in self.spaces:
                  q = q*self.subPaths(pace)
            return q
        else:
            q = 1
            if scope.type == 'decision':
                q = scope.ors()+1 # scope entrances
            for child in scope.getChilds():
                q = q*self.subPaths(child)
            if scope.type == 'decision':
                q += scope.ands()+1 # False exits
            return q
        return 0


    def trace(self):
        def dux(scope):
            trace = ''
            if scope:
                if scope.type == 'decision':
                    trace += str(self.subPaths(scope))+'$'+str(scope)+ ' { '
                for child in scope.getChilds():
                    trace += dux(child)
                if scope.type == 'decision':
                    trace += '} '
                    if scope.level == 0:
                        trace += '\n'
            return trace

        for pace in self.spaces:
              print(dux(pace))
        print("$"+str(self.uniquePath()))


if __name__ == '__main__':
    argparser = argparse.ArgumentParser(description='Static analysis code complexity measure for C style code (C, C++, C#, javascript, java).  Measures standard input stream (stdin) to provide an absolute integer value. Helps tracing condition paths.')
    argparser.add_argument('-a', action="store_true", help="acyclic complexity, (linear-quadratic measure), regards nested code structures (default)")
    argparser.add_argument('-c', action="store_true", help="cyclomatic complexity, (linear measure), condition count")
    argparser.add_argument('-q', action="store_true", help="all sub paths (exponential)")
    argparser.add_argument('-n', action="store_true", help="all sub paths, conjecture enclosed scopes")
    argparser.add_argument('-t', action="store_true", help="trace unique condition paths")
    args = argparser.parse_args()

    text=''
    
    for line in sys.stdin:
        text += line

    par=CCodeParser(text)
    par.parse()
    if args.t:
        par.trace()
    elif args.c:
        print(par.cabe())
    elif args.q:
        print(par.subPaths())
    elif args.n:
        print(par.subPathsEnclosed())
    else:
        print(par.acyc())

